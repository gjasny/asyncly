name: Continuous Integration
on: [push, pull_request]

jobs:
  cmake:
    name: CMake ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macOS-latest, ubuntu-18.04, windows-2019]
        include:
          - os: macOS-latest
            triplet: x64-osx
            generator: Ninja
          - os: ubuntu-18.04
            triplet: x64-linux
            generator: Ninja
          - os: windows-2019
            triplet: x86-windows
            generator: VS16Win32

    steps:
      - uses: actions/checkout@main

      - name: Restore artifacts, or run vcpkg, build and cache artifacts
        uses: lukka/run-vcpkg@v3.2
        id: runvcpkg
        with:
          vcpkgArguments: 'benchmark function2 gtest prometheus-cpp boost-asio boost-callable-traits boost-chrono boost-hana boost-optional boost-mp11 boost-thread boost-variant2'
          vcpkgTriplet: '${{ matrix.triplet }}'
          vcpkgDirectory: '${{ runner.workspace }}/b/vcpkg'
          vcpkgGitCommitId: 'c7ab9d3110813979a873b2dbac630a9ab79850dc' # 2020.04

      - name: 'Build asyncly'
        uses: lukka/run-cmake@v2.5
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtBasic
          cmakeBuildType: 'Release'
          cmakeGenerator: '${{ matrix.generator }}'
          useVcpkgToolchainFile: true
          buildDirectory: '${{ runner.workspace }}/cmakebuild'

      - name: 'Test asyncly'
        run: ctest -C Release -V
        working-directory: '${{ runner.workspace }}/cmakebuild'

  bazel:
    name: Bazel ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macOS-latest, ubuntu-latest, windows-latest]
        include:
          - os: macOS-latest
            bazel_args: '--cxxopt=-std=c++14'
          - os: ubuntu-latest
            bazel_args: '--cxxopt=-std=c++14'
          - os: windows-latest
            bazel_args: ''

    steps:
      - uses: actions/checkout@main

      - name: 'Build and test asyncly'
        run: bazel test ${{ matrix.bazel_args }} --test_output=all //...

      - name: 'Run asyncly benchmark'
        run: bazel run ${{ matrix.bazel_args }} -c opt //Test/Performance/...
